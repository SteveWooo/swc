新区块hash = md5(prev_hash + nonce + merkle_root)

nonce计算规则：(包含校验也是如此)
difficult根据区块生成时间动态调整，
要求 md5(prev_hash + nonce).substring(0, difficult.length) == difficult;

区块生成流程：
1:获得其他节点宣布新区块hash和新difficult
2:验证区块正确性，交易数据正确性，交易签名验证，然后写入本地块，公布confirm事件。
3:开始利用新区块hash进行nonce计算
4:计算出nonce，打包这期间的交易，计算merkle tree

交易创建方式：
交易块结构
{
	hash_id : md5("public+create_time+data"),
	creator : "public",
	create_time : "msts",
	data : "待定数据结构",
	sign : ecc(private+md5('public+create_time+data')),
	random : "6位int"
}

交易签名认证：
ecc(public, data, sign)

交易创建者利用private key加密交易块，然后和公钥一起公布到网络。
验证流程：用公钥解密后，校验creator是否等于公钥

交易公布获取方式：
1：交易发起者公布交易
2：节点矿工把这一交易组播（如果creator=当前public key则不转发），然后保存在内存中。
3：节点nonce计算成功后，把当前所有交易打包，把交易内容和块头，全部公布一个valid事件

几大模块梳理一下
1:网络层（传输数据）
2:持久层（持久存储数据）
3:表示层（解析交易数据）
4:应用层（后谈）

网络中的事件：
share_nodes : 心跳事件，用于发送节点列表
trade : 接收到交易事件，检查交易正确性后，用于广播与发送
block : 接收到新区块，检查区块，并结束挖矿，保存区块然后开始新的区块挖掘

交易内部事件：
create_app : 创建新的app
{
	event : "create_app",
	body : {
		creator,
		time,
		app_name,
	}
}

app_event : app内部事件
{
	event : "app_event",
	body : {
		creator,
		time,
		event_name,
		data,
	}
}

app_sync : app同步事件

挖矿：3.8s；
难度：5

挖矿：7.0s；
难度：6

挖矿：111s；
挖矿：109s；
挖矿：113s；
难度：7

要求12s

